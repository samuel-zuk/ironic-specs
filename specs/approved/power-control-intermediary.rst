..
 This work is licensed under a Creative Commons Attribution 3.0 Unported
 License.

 http://creativecommons.org/licenses/by/3.0/legalcode

=================================
Ironic Power Control Intermediary
=================================

https://storyboard.openstack.org/#!/story/2009184

One important aspect of our goal of improving support for node multi-tenancy
is to provide a seamless user experience for node lessees. This includes
enabling lessees to use their existing provisioning workflows on leased nodes
and to have these tools work as expected. Ironic policy does allow for lessees
to access basic power controls through either the Ironic REST API or the
``openstack baremetal`` CLI; however, if such tools lack instructions for
communicating with the Ironic API, the only way for them to function is by
making requests directly to the BMC of the node they wish to provision. This
would require giving the lessee BMC power credentials, which is especially
problematic considering that one of the goals of node multi-tenancy is to
enable this sort of functionality without giving the user such low-level
access. [NMTSTORY]_ [NODELEAS]_

Because such a solution is undesirable, to enable the use of existing
provisioning tools, we instead intend to emulate a standards-based interface
(Redfish, in this case) for use by node lessees. This interface will receive
Redfish API calls such as those made by provisioning tools, translate them into
equivalent calls to the Ironic API, and return a response in the format defined
by the Redfish schema. Importantly, requests will be authenticated using
application credentials generated by the lessee, enabling our Redfish emulator
to assume the identity of the lessee when proxying the requests it receives to
the Ironic API. This feature will solve the compatibility problem previously
described, and will do so without giving any special permissions to the lessee.

Problem description
===================

The main concern here is compatibility-- the problem in which a lessee has
tools that expect to communicate via an interface that is inaccessible has two
undesirable solutions.

The first is for the lessee's workflow to be refactored to instead make use of
the Ironic API. For the user this is both time and resource-consuming,
especially considering these lessees will often have access to bare metal nodes
for a limited timeframe.

The second is to provide the lessee with BMC credentials, which aside from
going against the principles of node multi-tenancy, is a huge security risk.
If these credentials are not limited in access scope, lessees could possibly
damage or otherwise compromise the bare metal node. Additionally, if the
provided credentials are not immediately revoked when the lessee is supposed to
lose access to the node, they would retain access to the node's power controls
(and potentially more) until the credentials are changed.

These solutions potentially address the compatibility issue, but in turn, they
create either a major efficiency issue or a major security issue. This feature
intends to address compatibility without significantly compromising security or
efficiency.

Proposed change
===============

We will create a new REST API endpoint at ``{IRONIC URI}/redfish/v1`` that
to the end user, will function like a legitimate v1 Redfish endpoint, albeit
with a limited feature set. This interface will provide minimal functionality,
just enough to allow Redfish provisioning tools to access power controls. In
the future, this emulator could be extended to provide additional features;
however, this is beyond the scope of what we aim to achieve in this spec.

At minimum, we require a means of authentication and identification, alongside
the power interfaces of the nodes themselves. Authentication and identity are
already managed by Keystone in a majority of OpenStack clouds, so our strategy
will be to have Keystone do as much of the work here as possible. This ties
directly into how we plan on overcoming one of the main hurdles in designing
the node control interfaces-- ensuring that the user is only granted access
to systems they are supposed to have access to as defined by Ironic policy.

Specifically, we plan on implementing this using application credentials, for
two reasons: the first being that ideally, we wish to avoid handling user
credentials (specifically passwords) directly wherever possible. The second
is that because one can authenticate a request with only the application
credential's ID and its corresponding secret [APPCREDS]_, we avoid the need to
serve a custom schema for the user to provide additional information that
would otherwise be required to authenticate with Keystone; namely project
name, user domain, and project domain; instead opting to pass the credential
ID in the username field and the secret in the password field.

The authentication process will be as follows:

1. The user will create an application credential through Keystone that
   importantly must be scoped to the project that has permissions on the node
   they wish to access, along with any necessary roles, such as ``member`` that
   are required by Ironic policy.

   * In response, they will receive an ID and a secret belonging to the newly
     created credential, alongside other details. These pieces of information
     will be used to authenticate the Redfish user.

2. The user will authenticate with the Redfish ``SessionService`` interface,
   supplying the application credential ID as a username and the secret as a
   password.

   * Internally, these will initiate a request to Keystone for a scoped
     authorization token, using the provided application credential. The
     Session object returned to the Redfish user will essentially just be a
     representation of this token.
   * In response, they will receive a Redfish schema-compliant Session object
     in the body, as well as an authorization token and the URL of the newly
     created Session's interface in the header. The auth token will be equal to
     the one returned from the internal Keystone request, and the identifier in
     the Session URL will be equal to the token's audit ID. [#]_

3. Now that the user is authenticated, they can proceed to perform whatever
   provisioning actions their workflow calls for as long as they provide their
   authorization token in the header of all such requests.

   * Internally, these requests are transformed into equivalent Ironic API
     requests and the response from Ironic is returned to the user in the
     expected Redfish format.
   * Since the internal requests will be made using the user's identity, the
     data returned by Ironic should be no more and no less than what would
     be received if done directly via interfaces such as the CLI.

4. The user sends a DELETE request to the Session URL from the response they
   received in step 2, ending their session and requiring re-authentication
   for any additional requests they wish to make.

   * Internally, this will revoke the authorization token in the Keystone
     service.

The actual node provisioning tools that will be provided here will possess
identical functionality to existing Bare Metal endpoints. The way these will
map onto each other is as follows:

+------+--------------------------------------------+-----------------------+
| Type | Emulated Redfish URI                       | Equivalent Ironic URI |
+======+============================================+=======================+
| GET  | /redfish/v1/SystemService/Systems          | /v1/nodes             |
+------+--------------------------------------------+-----------------------+
| GET  | /redfish/v1/SystemService/Systems/{uuid}   | /v1/nodes/{uuid}      |
+------+--------------------------------------------+-----------------------+
| PUT  | /redfish/v1/SystemService/Systems/{uuid}\  | /v1/nodes/{uuid}\     |
|      | /Actions/ComputerSystem.Reset              | /states/power         |
+------+--------------------------------------------+-----------------------+

This intermediary will abide by version 1.0.0 of the Redfish spec [RFSHSPEC]_
and schema [RFSHSCHM]_ for maximum backwards compatibility with existing tools.
More details regarding the planned functionality of these endpoints will be
elaborated upon below in the `REST API Impact`_ section, and implementation
decisions that merit further discussion will be included in the `Additional
implementation details`_ section.

Alternatives
------------

The type of BMC interface emulation we're looking to implement here does
already exist in sushy-tools [SUSHY]_ and VirtualBMC [VIRTBMC]_, which emulate
Redfish and IPMI respectively. A previous spec was submitted by Tzu-Mainn Chen
(tzumainn) which proposed the idea of a sushy-tools driver in Ironic to enable
this functionality, but concerns about security, along with the potential value
of this existing in Ironic proper have led to the proposal of this spec.
[PREVSPEC]_

Regardless of the direction our implementation goes, we currently plan on
integrating this into the Ironic API itself, however it could also exist
independently as its own separate WSGI service.

Additional implementation details
---------------------------------

Most of the functionality provided by Ironic that we wish to implement here
corresponds quite neatly to what is called for in the Redfish specification.
However, this is not always entirely the case; this section documents the
instances of these disparities where a clear resolution is not immediately
obvious. For each of these cases, I have offered potential solutions, but I
believe further discussion is warranted as to which of these solutions, if
any, should be officially implemented when the time comes. Multiple solutions
to each problem could also be implemented alongside each other, leaving the
choice up to the cloud operator to decide how they wish to configure the
power intermediary for their particular setup.

Authorization token expiration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Unlike other token-based authentication strategies, including Keystone, Redfish
specifies that their Sessions should timeout after a certain period instead of
expiring at a certain date and time. (Section 9.3.4 of [RFSHSPEC]_) This could
be implemented by sending a request to update the expiration time of the token
by a defined amount for each request made using said token. Alternatively, it
can simply not be implemented and a placeholder value for the length of this
timeout period can be returned to the user.

Potentially, the difference between how the Redfish user expects Sessions to
behave and how they behave in practice could cause some issues, but it would
require more requests to be made whenever this proxy is accessed. Keystone
tokens (which correspond to Redfish sessions) already expire after a certain
time period by default as well, so unless the cloud operator implements custom
auth token settings, orphaned tokens will automatically be revoked eventually
regardless.

Behavior of GET requests to the emulated SessionService
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Redfish considers the ``/redfish/v1/SessionService/Sessions`` URL to point to
a Session Collection, which means GET requests to it should return a list
containing links to Sessions. (see the "Resource collections" section of
[RFSHSUPP]_) But since here, Sessions are simply a means of representing
Keystone authorization tokens, we must decide what exactly to return. Two
possible solutions that are both intended to limit what is returned to the user
to what is relevant to Redfish-style authentication requests are listed below:

* Return one item every time: the Session used to make the GET request in the
  first place. This will be less expensive, poses no risk of exposing extra
  data unintentionally, and should ensure compatibility (e.g. a sanity check
  request to ensure the newly created Session is returned back)
* Return all the Sessions created with the same credentials. This would be a
  slightly more expensive operation and could potentially disclose the
  existence of tokens that the user didn't intend to expose, but would play
  much nicer with workflows that involve provisioning multiple nodes at once.

Basic authorization
~~~~~~~~~~~~~~~~~~~

The Sessions model is not the only means for authentication defined in the
Redfish specification. Also included is support for HTTP Basic Authentication
as defined in RFC7617, which boils down to sending base64-encoded username and
password credentials in the header of every request. [RFC7617]_ This is not
considered a favorable means of authenticating for many reasons ( [SESSIONS]_),
and among them are:

* The username and password provided must be checked against the credentials
  database for every request, making every request more expensive and also
  creating a potential vector for Denial of Service attacks.
* Since each request is more expensive, the latency between request and
  response will be increased, making operations slower.
* Sending credentials with every request gives a potential attacker much more
  chances to intercept said credentials, which themselves are more sensitive
  than an individual authorization token.

In any case, we should encourage use of the Sessions interface whenever
possible, but the absence of this feature does pose a major potential issue
for compatibility. My proposed solution is that it should be disabled unless
explicitly enabled via a configuration setting, but again, I believe this
warrants further discussion, particularly by those among us who are
knowledgeable in cybersecurity.

Redfish representation of Ironic node power states
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Five power states are possible for an Ironic node, however only four power
states are defined by Redfish, and these four don't all map cleanly from Ironic
power states. They are:

* For Ironic (see the details for PUT requests to ``/v1/nodes/{ident}/states
  /power`` in [IRONCAPI]_):

  * POWER_ON
  * POWER_OFF
  * SOFT_POWER_OFF
  * REBOOT
  * SOFT_REBOOT

* For Redfish (page 132 of [RFSHSUPP]_):

  * On
  * Off
  * PoweringOn
  * PoweringOff

Three of these map cleanly onto defined Redfish power states (POWER_ON -> On,
POWER_OFF -> Off, SOFT_POWER_OFF -> Powering Off), but the Ironic "reboot"
power states do not.

I see a few possible solutions here, one being to map both "reboot" states onto
"Powering On", the other being to serve a custom schema that includes a
"Rebooting" state. If the latter is used, we could either have both Ironic
"reboot" states map on to this new Redfish state, or we could have one map onto
the new state, and the other map onto "Powering On". We could also leave the
Redfish "Powering On" state unused and serve two custom states, such as "Soft
Rebooting" and "Rebooting" or something similar.

Adding new states in a custom schema has the potential to create compatibility
issues with Redfish tools, but especially if it is important to distinguish
between the "REBOOT" and "SOFT_REBOOT" Ironic node power states, it is
somewhat unavoidable, as there simply aren't enough values provided by default
by Redfish. Once again, I will leave this up for discussion for those more
experienced then I in the context of node provisioning.

Data model impact
-----------------
None.

State Machine Impact
--------------------
None.

REST API impact
---------------

The following endpoints will be added, available beginning with a new Bare
Metal API microversion. All of the endpoints below mirror those defined in
version 1.0.0 of the Redfish specification [RFSHSPEC]_ and schema [RFSHSCHM]_.

Redfish API Versions:
~~~~~~~~~~~~~~~~~~~~~

* GET /redfish

  * Returns the Redfish protocol version (v1). This will always return the same
    response shown below, as per the Redfish API spec. (section 6.2 of
    [RFSHSPEC]_)
  * Normal response code: 200 OK
  * Example response::

      {
          "v1": "/redfish/v1/"
      }

    +------+--------+----------------------------------------+
    | Name | Type   | Description                            |
    +======+========+========================================+
    | v1   | string | The URL of the Redfish v1 ServiceRoot. |
    +------+--------+----------------------------------------+

* GET /redfish/v1/

  * The Redfish service root URL, will return a Redfish ServiceRoot object.
  * Normal response code: 200 OK
  * Example response::

      {
          "@odata.type": "#ServiceRoot.v1_0_0.ServiceRoot",
          "Id": "IronicProxy",
          "Name": "Ironic Redfish Proxy",
          "RedfishVersion": "1.0.0",
          "Links": {
              "Sessions": {
                  "@odata.id": "/redfish/v1/SessionService/Sessions"
              }
          },
          "Systems": {
              "@odata.id": "/redfish/v1/Systems"
          },
          "SessionService": {
              "@odata.id": "/redfish/v1/SessionService"
          },
          "@odata.id": "/redfish/v1/"
      }

    +------------------+--------+---------------------------------------------+
    | Name             | Type   | Description                                 |
    +==================+========+=============================================+
    | @odata.type      | string | The type of the emulated Redfish resource.  |
    +------------------+--------+---------------------------------------------+
    | @odata.id        | string | A resource link.                            |
    +------------------+--------+---------------------------------------------+
    | Id               | string | The identifier for this specific resource.  |
    +------------------+--------+---------------------------------------------+
    | Name             | string | The name of this specific ServiceRoot.      |
    +------------------+--------+---------------------------------------------+
    | Links            | object | Contains objects that contain links to      |
    |                  |        | relevant resource collections.              |
    +------------------+--------+---------------------------------------------+
    | Systems          | object | Contains a link to a collection of Systems  |
    |                  |        | resources.                                  |
    +------------------+--------+---------------------------------------------+
    | SessionService   | object | Contains a link to the SessionsService      |
    |                  |        | resource.                                   |
    +------------------+--------+---------------------------------------------+
    | Sessions         | object | Contains a link to a collection of Sessions |
    |                  |        | resources.                                  |
    +------------------+--------+---------------------------------------------+
    | RedfishVersion   | string | The version of this Redfish service.        |
    +------------------+--------+---------------------------------------------+

Authentication (Sessions)
~~~~~~~~~~~~~~~~~~~~~~~~~

* GET /redfish/v1/SessionService

  * Returns a Redfish SessionService object, containing information about the
    authentication service interface.
  * Normal response code: 200 OK
  * Example response::

      {
          "@odata.type": "#SessionService.v1_0_0.SessionService",
          "Id": "IronicProxyAuth",
          "Name": "Ironic Proxy Authentication Service",
          "Status": {
              "State": "Enabled",
              "Health": "OK"
          },
          "ServiceEnabled": true,
          "SessionTimeout": 86400,
          "Sessions": {
              "@odata.id": "/redfish/v1/SessionService/Sessions"
          },
          "@odata.id": "/redfish/v1/SessionService"
      }

    +----------------+--------+----------------------------------------------+
    | Name           | Type   | Description                                  |
    +================+========+==============================================+
    | @odata.type    | string | The type of the emulated Redfish resource.   |
    +----------------+--------+----------------------------------------------+
    | @odata.id      | string | A resource link.                             |
    +----------------+--------+----------------------------------------------+
    | Id             | string | The identifier for this specific resource.   |
    +----------------+--------+----------------------------------------------+
    | Name           | string | The name of this specific resource.          |
    +----------------+--------+----------------------------------------------+
    | Status         | object | An object containing service status info.    |
    +----------------+--------+----------------------------------------------+
    | State          | string | The state of the service, one of either      |
    |                |        | "Enabled" or "Disabled".                     |
    +----------------+--------+----------------------------------------------+
    | Health         | string | The health of the service, typically "OK".   |
    |                |        | [#]_                                         |
    +----------------+--------+----------------------------------------------+
    | ServiceEnabled | bool   | Indicates whether the SessionService is      |
    |                |        | enabled or not.                              |
    +----------------+--------+----------------------------------------------+
    | SessionTimeout | number | The amount of time, in seconds, before a     |
    |                |        | session expires due to inactivity. [#]_      |
    +----------------+--------+----------------------------------------------+
    | Sessions       | object | Contains a link to a collection of Session   |
    |                |        | resources.                                   |
    +----------------+--------+----------------------------------------------+

* GET /redfish/v1/SessionService/Sessions

  * Returns a collection of Redfish Session interfaces. [#]_
  * Normal response code: 200 OK
  * Example response::

      {
          "@odata.type": "#SessionCollection.SessionCollection",
          "Name": "Ironic Proxy Session Collection",
          "Members@odata.count": 2,
          "Members": [
              {
                  "@odata.id": "/redfish/v1/SessionService/Sessions/ABC"
              },
              {
                  "@odata.id": "/redfish/v1/SessionService/Sessions/DEF"
              }
          ],
          "@odata.id": "/redfish/v1/SessionService/Sessions"
      }

    +---------------------+--------+------------------------------------------+
    | Name                | Type   | Description                              |
    +=====================+========+==========================================+
    | @odata.type         | string | The type of the emulated Redfish         |
    |                     |        | resource.                                |
    +---------------------+--------+------------------------------------------+
    | @odata.id           | string | A resource link.                         |
    +---------------------+--------+------------------------------------------+
    | Name                | string | The name of this specific resource.      |
    +---------------------+--------+------------------------------------------+
    | Members@odata.count | number | The number of Session interfaces present |
    |                     |        | in the collection.                       |
    +---------------------+--------+------------------------------------------+
    | Members             | array  | An array of objects that contain links   |
    |                     |        | to individual Session interfaces.        |
    +---------------------+--------+------------------------------------------+

* POST /redfish/v1/SessionService/Sessions

  * Requests Session authentication. A username and password is to be passed in
    the body, and upon success, the created Session object will be returned.
    Included in the headers of this response will be the authentication token
    in the ``X-Auth-Token`` header, and the link to the Session object in the
    ``Location`` header.
  * Normal response code: 201 Created
  * Error response codes: 400 Bad Request, 403 Forbidden, 500 Internal Server
    Error

    * 400 Bad Request will be returned if the username/password fields are not
      found in the message body.
    * 403 Forbidden will be returned if the credentials provided are invalid.
    * 500 Internal Server Error will be returned if the internal request to
      authenticate could not be fulfilled.

  * Example Request::

      {
          "UserName": "85775665-c110-4b85-8989-e6162170b3ec",
          "Password": "its-a-secret-shhhhh"
      }

    +----------+--------+----------------------------------------------------+
    | Name     | Type   | Description                                        |
    +==========+========+====================================================+
    | UserName | string | The UUID of the Keystone application credential to |
    |          |        | be used for authentication.                        |
    +----------+--------+----------------------------------------------------+
    | Password | string | The secret of said application credential.         |
    +----------+--------+----------------------------------------------------+

  * Example Response::

      Location: /redfish/v1/SessionService/Sessions/identifier
      X-Auth-Token: super-duper-secret-aaaaaaaaaaaa

      {
          "@odata.id": "/redfish/v1/SessionService/Sessions/identifier",
          "@odata.type": "#Session.1.0.0.Session",
          "Id": "identifier",
          "Name": "user session",
          "UserName": "85775665-c110-4b85-8989-e6162170b3ec"
      }

    +-------------+--------+--------------------------------------------+
    | Name        | Type   | Description                                |
    +=============+========+============================================+
    | @odata.type | string | The type of the emulated Redfish resource. |
    +-------------+--------+--------------------------------------------+
    | @odata.id   | string | A resource link.                           |
    +-------------+--------+--------------------------------------------+
    | Id          | string | The identifier for this specific resource. |
    +-------------+--------+--------------------------------------------+
    | Name        | string | The name of this specific resource.        |
    +-------------+--------+--------------------------------------------+
    | UserName    | string | The application credential used for        |
    |             |        | authentication                             |
    +-------------+--------+--------------------------------------------+

* GET /redfish/v1/SessionService/Sessions/{identifier}

  * Returns the Session with the identifier specified in the URL. Requires the
    user to provide valid authentication in the request header for the session
    they are attempting to access.
  * Normal response code: 200 OK
  * Error response codes: 403 Forbidden, 404 Not Found, 500 Internal Server
    Error

    * 403 Forbidden will be returned if authentication in the header field is
      either absent or invalid for the Session being accessed.
    * 404 Not Found will be returned if the identifier specified does not
      correspond to a legitimate Session ID.
    * 500 Internal Server Error will be returned if the internal request to
      authenticate could not be fulfilled.

  * Example Response::

      {
          "@odata.id": "/redfish/v1/SessionService/Sessions/identifier",
          "@odata.type": "#Session.1.0.0.Session",
          "Id": "identifier",
          "Name": "user session",
          "UserName": "85775665-c110-4b85-8989-e6162170b3ec"
      }

    +-------------+--------+--------------------------------------------+
    | Name        | Type   | Description                                |
    +=============+========+============================================+
    | @odata.type | string | The type of the emulated Redfish resource. |
    +-------------+--------+--------------------------------------------+
    | @odata.id   | string | A resource link.                           |
    +-------------+--------+--------------------------------------------+
    | Id          | string | The identifier for this specific resource. |
    +-------------+--------+--------------------------------------------+
    | Name        | string | The name of this specific resource.        |
    +-------------+--------+--------------------------------------------+
    | UserName    | string | The application credential used for        |
    |             |        | authentication                             |
    +-------------+--------+--------------------------------------------+

* DELETE /redfish/v1/SessionService/Sessions/{identifier}

  * Ends the session identified in the URL. Requires the user to provide valid
    authentication in the request header for the session they're trying to end.
  * Normal response code: 204 No Content
  * Error response codes: 403 Forbidden, 404 Not Found, 500 Internal Server
    Error

    * 403 Forbidden will be returned if the authentication in the header field
      is either absent or invalid for the Session being accessed.
    * 404 Not Found will be returned if the identifier specified does not
      correspond to a legitimate Session ID.
    * 500 Internal Server Error will be returned if the internal request to
      authenticate could not be fulfilled.

Node Management
~~~~~~~~~~~~~~~

* GET /redfish/v1/Systems

  * Equivalent to ``baremetal node list``, will return a collection of Redfish
    ComputerSystem interfaces that correspond to Ironic nodes. Requires the
    user to provide valid authentication in the request header for the
    resource they are trying to access.
  * Normal response code: 200 OK
  * Error response codes: 403 Forbidden, 500 Internal Server Error

    * 403 Forbidden will be returned if the authentication in the header field
      is either absent or invalid.
    * 500 Internal Server Error will be returned if the internal request to the
      Bare Metal service could not be fulfilled.

  * Example Response::

      {
          "@odata.type": "#ComputerSystemCollection.ComputerSystemCollection",
          "Name": "Ironic Node Collection",
          "Members@odata.count": 2,
          "Members": [
              {
                  "@odata.id": "/redfish/v1/Systems/ABCDEFG"
              },
              {
                  "@odata.id": "/redfish/v1/Systems/HIJKLMNOP"
              }
          ],
          "@odata.id": "/redfish/v1/Systems"
      }

    +---------------------+--------+------------------------------------------+
    | Name                | Type   | Description                              |
    +=====================+========+==========================================+
    | @odata.type         | string | The type of the emulated Redfish         |
    |                     |        | resource.                                |
    +---------------------+--------+------------------------------------------+
    | @odata.id           | string | A resource link.                         |
    +---------------------+--------+------------------------------------------+
    | Name                | string | The name of this specific resource.      |
    +---------------------+--------+------------------------------------------+
    | Members@odata.count | number | The number of System interfaces present  |
    |                     |        | in the collection.                       |
    +---------------------+--------+------------------------------------------+
    | Members             | array  | An array of objects that contain links   |
    |                     |        | to individual System interfaces.         |
    +---------------------+--------+------------------------------------------+

* GET /redfish/v1/Systems/{node_ident}

  * Equivalent to ``baremetal node show``, albeit with fewer details. Will
    return a Redfish System resource containing basic info, power info, and the
    location of the power control interface. Requires the user to provide valid
    authentication for the resource they are trying to access.
  * Normal response code: 200 OK
  * Error response codes: 403 Forbidden, 404 Not Found, 500 Internal Server
    Error

    * 403 Forbidden will be returned if the authentication in the header field
      is absent, invalid, or if the user has inadequate permissions.
    * 404 Not Found will be returned if the identifier specified does not
      correspond to a legitimate node UUID.
    * 500 Internal Server Error will be returned if the internal request to the
      Bare Metal service could not be fulfilled.

  * Example Response::

      {
          "@odata.type": "#ComputerSystem.v1.0.0.ComputerSystem",
          "Id": "ABCDEFG",
          "Name": "Baremetal Host ABC",
          "Description": "It's a computer",
          "UUID": "ABCDEFG",
          "PowerState": "On",
          "Actions": {
              "#ComputerSystem.Reset": {
                  "target": "/redfish/v1/Systems/ABCDEFG/Actions/ComputerSystem.Reset",
                  "ResetType@Redfish.AllowableValues": [
                      "On",
                      "ForceOn",
                      "ForceOff",
                      "ForceRestart",
                      "GracefulRestart",
                      "GracefulShutdown"
                  ]
              }
          },
          "@odata.id": "/redfish/v1/Systems/ABCDEFG"
      }

    +--------------------+--------+-------------------------------------------+
    | Name               | Type   | Description                               |
    +====================+========+===========================================+
    | @odata.type        | string | The type of the emulated Redfish          |
    |                    |        | resource.                                 |
    +--------------------+--------+-------------------------------------------+
    | @odata.id          | string | A resource link.                          |
    +--------------------+--------+-------------------------------------------+
    | Id                 | string | The identifier for this specific          |
    |                    |        | resource. Equal to the corresponding      |
    |                    |        | Ironic node UUID.                         |
    +--------------------+--------+-------------------------------------------+
    | Name               | string | The name of this specific resource.       |
    |                    |        | Equal to the name of the corresponding    |
    |                    |        | Ironic node if set, otherwise equal to    |
    |                    |        | the node UUID.                            |
    +--------------------+--------+-------------------------------------------+
    | Description        | string | If the Ironic node has a description set, |
    |                    |        | it will be returned here. If not, this    |
    |                    |        | field will not be returned.               |
    +--------------------+--------+-------------------------------------------+
    | UUID               | string | The UUID of this resource.                |
    +--------------------+--------+-------------------------------------------+
    | PowerState         | string | The current state of the node/System in   |
    |                    |        | question, one of either "On", "Off",      |
    |                    |        | "Powering On", or "Powering Off" [#]_     |
    +--------------------+--------+-------------------------------------------+
    | Actions            | object | Contains the defined actions that can be  |
    |                    |        | executed on this system.                  |
    +--------------------+--------+-------------------------------------------+
    | #ComputerSystem.   | object | Contains information about the "Reset"    |
    | Reset              |        | action.                                   |
    +--------------------+--------+-------------------------------------------+
    | target             | string | The URI of the Reset action interface.    |
    +--------------------+--------+-------------------------------------------+
    | ResetType@Redfish. | array  | An array of strings containing all the    |
    | AllowableValues    |        | valid options this action provides.       |
    +--------------------+--------+-------------------------------------------+

* POST /redfish/v1/Systems/{node_ident}/Actions/ComputerSystem.Reset

  * Invokes a Reset action to change the power state of the node/System. The
    type of Reset action to take should be specified in the request body.
    Requires the user to provide valid authentication in the request header
    for the resource they are attempting to access.
  * Accepts the following values for ResetType in the body [#]_:

    * "On" (soft power on)
    * "ForceOn" (hard power on)
    * "GracefulShutdown" (soft power off)
    * "ForceOff" (hard power off)
    * "GracefulRestart" (soft reboot)
    * "ForceRestart" (hard reboot)

  * Normal response code: 202 Accepted
  * Error response codes: 400 Bad Request, 403 Forbidden, 404 Not Found,
    409 NodeLocked/ClientError, 500 Internal Server Error, 503
    NoFreeConductorWorkers (for more on codes 409 and 503, see the details for
    PUT requests to ``/v1/nodes/{ident}/states/power`` in [IRONCAPI]_):

    * 400 Bad Request will be returned if the "ResetType" field is not found in
      the message body, or if the field has an invalid value.
    * 403 Forbidden will be returned if the authentication in the header field
      is either absent or invalid for the resource being accessed.
    * 404 Not Found will be returned if the identifier specified does not
      correspond to a legitimate node UUID.
    * 409 NodeLocked/ClientError is an error code specified in the Bare Metal
      API call this request is proxied to. The body of a 409 response will be
      the same as that which was received from the Bare Metal API.
    * 500 Internal Server Error will be returned if the internal request to the
      Bare Metal service could not be fulfilled.
    * 503 NoFreeConductorWorkers is an error code specified in the Bare Metal
      API call this request is proxied to. The body of a 503 response will be
      the same as that which was received from the Bare Metal API.

  * Example Request::

      X-Auth-Token: super-duper-secret-aaaaaaaaaaaa

      {
          "ResetType": "ForceOff"
      }

  +-----------+--------+----------------------------------------------+
  | Name      | Type   | Description                                  |
  +===========+========+==============================================+
  | ResetType | string | The type of Reset action to take (see above) |
  +-----------+--------+----------------------------------------------+

Client (CLI) impact
-------------------
None.

"openstack baremetal" CLI
~~~~~~~~~~~~~~~~~~~~~~~~~

Though this addition would include new REST API endpoints, this feature merely
provides another way for users to access already existing features within the
Ironic API, which are already accessible from the ``openstack baremetal`` CLI.

"openstacksdk"
~~~~~~~~~~~~~~
None.

RPC API impact
--------------
None.

Driver API impact
-----------------
None.

Nova driver impact
------------------
None.

Ramdisk impact
--------------
None.

Security impact
---------------

The main consideration when it comes to the security of this feature is the
addition of a new means of accessing Ironic hardware. Generally speaking, a
considerable amount of risk is mitigated by having the emulated Redfish
Session service use application tokens (which can be revoked at any time) as
the primary means of authentication, as opposed to being given user/password
credentials directly.

To mitigate further risk, generated application credentials can and should be
limited in scope to only allow access to the parts of the Ironic API required
by this intermediary. We will also require all requests to be performed over
HTTPS, as session tokens will be sent in plaintext in the message header, as
will application credential secrets in the message body of authentication
requests.

A final major point of consideration with regards to security is how to handle
Redfish Basic Authorization. This is elaborated upon above in the _`Basic
Authorization` section above.

Other end user impact
---------------------

This will give end users an alternative way of accessing power controls, one
compatible with existing Redfish provisioning tools. This means in theory,
the majority of users won't be making API calls directly, instead utilizing
pre-existing Redfish-compatible software, such as
`<Redfishtool https://github.com/DMTF/Redfishtool>`_.

Scalability impact
------------------
None.

Performance Impact
------------------

The impact of this feature's addition should be light, as it shouldn't
require periodic tasks to be ran or extraneous database queries to be made.
If this is to be integrated into the Ironic API, any performance decrease
should be negligible. However, if this is to exist as its own separate WSGI
service, there will be some additional overhead required, although since this
is a simple service, the impact will be minor.

Other deployer impact
---------------------

This feature is not something that all Ironic users will want by default,
especially those who do not plan on making use of node multi-tenancy. It
should therefore be disabled by default, and should be enabled by setting
a configuration flag. Another configuration setting could also be implemented
to disable authentication for testing purposes only-- whether or not this is
useful or a good idea I will leave up for further discussion.

Developer impact
----------------

The Sessions feature does not exist in sushy-tools; since this spec proposes
an implementation of it, it is possible it could be a useful addition there.

Implementation
==============

Assignee(s)
-----------

Primary assignee:
  | Sam Zuk (sam_z / szuk) <szuk@redhat.com>

Other contributors:
  | Tzu-Mainn Chen (tzumainn) <tzumainn@redhat.com>
  | Lars Kellogg-Stedman (larsks) <lars@redhat.com>

Work Items
----------

* Create the necessary API endpoints

  * Implement the Redfish System -> Ironic Node proxy
  * Implement the Redfish Session -> Keystone authentication proxy
  * Write unit tests and functional tests to ensure proper functionality

* Write documentation for how to use and configure this functionality, for
  users, administrators, and developers.
* Test this feature on real hardware in a way that mimics expected use cases.

Dependencies
============

None.

Testing
=======

Functional testing will be required to ensure requests made to these new proxy
endpoints result in the correct behavior when ran on an actual Ironic setup.
Furthermore, rigorous test cases should be written to make extremely sure that
no unauthorized access to node APIs is possible.

Upgrades and Backwards Compatibility
====================================

N/A


Documentation Impact
====================

Documentation will need to be provided for the new API endpoints, along with
the necessary instructions for how to enable and configure this feature (for
operators), along with additional information end users may require, such as
how to work with authentication tokens.

References
==========

.. [NMTSTORY] https://storyboard.openstack.org/#!/story/2006506
.. [NODELEAS] https://opendev.org/openstack/ironic-specs/src/commit/6699db48d78b7a42f90cb5c06ba18a72f94b6667/specs/approved/node-lessee.rst
.. [APPCREDS] https://docs.openstack.org/keystone/latest/user/application_credentials.html
.. [SUSHY]    https://docs.openstack.org/sushy-tools/latest/
.. [VIRTBMC]  https://docs.openstack.org/project-deploy-guide/tripleo-docs/latest/environments/virtualbmc.html
.. [PREVSPEC] https://review.opendev.org/c/openstack/ironic-specs/+/764801/3/specs/approved/power-control-passthrough.rst
.. [RFSHSPEC] https://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.0.0.pdf
.. [RFSHSCHM] https://www.dmtf.org/sites/default/files/standards/documents/DSP8010_1.0.0.zip
.. [RFSHSUPP] https://www.dmtf.org/sites/default/files/standards/documents/DSP0268_2019.3.pdf
.. [SESSIONS] https://www.dmtf.org/sites/default/files/Redfish_School-Sessions.pdf
.. [RFC7617]  https://datatracker.ietf.org/doc/html/rfc7617
.. [IRONCAPI] https://docs.openstack.org/api-ref/baremetal
.. [KSTNEAPI] https://docs.openstack.org/api-ref/identity/v3/index.html

.. [#] Individual auth tokens require some sort of identifier to be compliant
       with Redfish Sessions, and the most fitting of these seemed to be the
       token's audit ID. The Identity API reference notes that "You can use
       these audit IDs to track the use of a token ... without exposing the
       token ID to non-privileged users."
.. [#] This is included for compatibility and should always be "OK", although
       the Redfish schema allows for "Warning" and "Critical" as well.
.. [#] See _`Authorization token expiration`.
.. [#] See _`Behavior of GET requests to the emulated SessionService`.
.. [#] See _`Redfish representation of Ironic node power states`.
.. [#] The Redfish schema for ResetType also includes "Nmi" (diagnostic
       interrupt) and "PushPowerButton" (simulates a physical power button
       press event) but since these are not part of the Ironic spec, they are
       made unavailable here.
